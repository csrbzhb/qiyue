name: build-h3

on:
  workflow_dispatch:

env:
  FIRMWARE_TAG: Neo-EmuELEC-H3
  TZ: Asia/Shanghai
  REPO_URL: https://github.com/csrbzhb/Neo-EmuELEC-H3.git
jobs:
  build:

    runs-on: ubuntu-20.04

    steps:   
    - uses: actions/checkout@v4

    - name: Initialization environment
      run: |
        sudo apt -y update && sudo apt upgrade -y
        sudo apt-get -y install gcc make git unzip wget xz-utils libsdl2-dev libsdl2-mixer-dev libfreeimage-dev libfreetype6-dev libcurl4-openssl-dev rapidjson-dev libasound2-dev libgl1-mesa-dev build-essential libboost-all-dev cmake fonts-droid-fallback libvlc-dev libvlccore-dev vlc-bin texinfo premake4 golang libssl-dev curl patchelf xmlstarlet default-jre xsltproc
        sudo apt install -y patchutils gperf lzop xfonts-utils libxml-parser-perl device-tree-compiler
        sudo timedatectl set-timezone "$TZ"

    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Combine Disks(合并磁盘)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code(克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b master
        cd Neo-EmuELEC-H3/
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV

    - name: Generate Variables(生成变量)
      run: |
        cd $OPENWRT_PATH
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET="h3"
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV

    - name: start compile make
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo "PRJ_PATH=$PWD" >> $GITHUB_ENV
        PROJECT=H3 ARCH=arm DISTRO=EmuELEC make -j4
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Organize Files(整理文件)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $PRJ_PATH/sources/
        tar -zcf - * | split - -b 1800m sources.tar.gz
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      if: steps.compile.outputs.status == 'success'
      uses: actions/upload-artifact@main
      with:
        name: sources-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release(发布固件)
      if: steps.compile.outputs.status == 'success'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is sources Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 🧊 固件版本
          - sources文件打包

